;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname unfinished-32-exampled) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
; An SOE is a non-empty Matrix
; constraint if its length is n (in N), each item has length (+ n 1)
; interpretation an SOE represents a system of linear equations
 
; An Equation is [List-of Number]
; constraint an Equation contains at least two numbers. 
; interpretation if (list a1 ... an b) is an Equation, a1, ..., an are
; the left-hand side variable coefficients and b is the right-hand side
 
; A Solution is [List-of Number]

(define (check-solution soe solution)
  (local ((define (check eq sol)
            (= (first (reverse eq))
               (mul eq sol)))
          (define (mul lon1 lon2)
            (cond
              [(or (empty? lon1) (empty? lon2)) 0]
              [else (+ (* (first lon1) (first lon2))
                       (mul (rest lon1) (rest lon2)))])))
  (cond
    [(empty? (rest soe)) (check (first soe) solution)]
    [else (and (check (first soe) solution)
               (check-solution (rest soe) solution))])))
(define soe (list (list 2 2 3 10)
                  (list 2 5 12 31)
                  (list 4 1 -2 1)))
(define solution '(1 1 2))
(check-solution soe solution)

(define (*. num lon)
  (cond
    [(empty? lon) '()]
    [else (cons (* num (first lon))
                (*. num (rest lon)))]))

; substract eq1 from eq2
(define (substract eq1 eq2)
  (local ((define (minus lon1 lon2)
            (cond
              [(empty? lon1) '()]
              [else (cons (- (first lon2) (first lon1))
                          (minus (rest lon1) (rest lon2)))])))
  (cond
    [(< (* (first eq1) (first eq2)) 0)
     (if (< (first eq1) 0)
         (substract (*. -1 eq1) eq2)
         (substract eq1 (*. -1 eq2)))]
    [(= (first eq2) (first eq1)) (rest (minus eq1 eq2))]
    [else (substract eq1 (minus eq1 eq2))])))

(define (remove-last l)
  (reverse (rest (reverse l))))
(define (last l)
  (first (reverse l)))
; SOE -> TM
; triangulates the given system of equations 
(define (triangulate M)
  (cond
    [(empty? (rest M)) (first M)]
    [(= 2 (length M)) (cons (substract (first M) (second M))
                            (rest M))]
    [else (cons (first M)
                (triangulate (cons (substract (first M) (second M))
                                   (rest (rest M)))))]))

(define l1 '(3 9 21))
(define l2 '(-3 -8 -19))
(define M
  (list (list 2 2  3 10)
        (list 2 5 12 31)
        (list 4 1 -2  1)))
(triangulate M)
